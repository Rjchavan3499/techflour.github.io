(function(B){var C="/zohocreator/static_js/recorderWorker.js";var A=function(G,D){var F=D||{};var H=F.bufferLen||4096;this.context=G.context;if(!this.context.createScriptProcessor){this.node=this.context.createJavaScriptNode(H,2,2)}else{this.node=this.context.createScriptProcessor(H,2,2)}var I=new Worker(F.workerPath||C);I.postMessage({command:"init",config:{sampleRate:this.context.sampleRate,numChannels:2}});var E=false,J;this.node.onaudioprocess=function(K){if(!E){return }I.postMessage({command:"record",buffer:[K.inputBuffer.getChannelData(0),K.inputBuffer.getChannelData(1)]})};this.configure=function(K){for(var L in K){if(K.hasOwnProperty(L)){F[L]=K[L]}}};this.record=function(){E=true};this.stop=function(){E=false};this.clear=function(){I.postMessage({command:"clear"})};this.getBuffers=function(K){J=K||F.callback;I.postMessage({command:"getBuffers"})};this.exportWAV=function(K,L){J=K||F.callback;L=L||F.type||"audio/wav";if(!J){throw new Error("Callback not set")}I.postMessage({command:"exportWAV",type:L})};this.exportMonoWAV=function(K,L){J=K||F.callback;L=L||F.type||"audio/wav";if(!J){throw new Error("Callback not set")}I.postMessage({command:"exportMonoWAV",type:L})};I.onmessage=function(L){var K=L.data;J(K)};G.connect(this.node);this.node.connect(this.context.destination)};A.setupDownload=function(E,D){var F=(B.URL||B.webkitURL).createObjectURL(E);var G=document.getElementById("save");G.href=F;G.download=D||"output.wav"};B.Recorder=A})(window);var recLength=0,recBuffers=[],sampleRate,numChannels;this.onmessage=function(A){switch(A.data.command){case"init":init(A.data.config);break;case"record":record(A.data.buffer);break;case"exportWAV":exportWAV(A.data.type);break;case"getBuffer":getBuffer();break;case"clear":clear();break}};function init(A){sampleRate=A.sampleRate;numChannels=A.numChannels;initBuffers()}function record(B){for(var A=0;A<numChannels;A++){recBuffers[A].push(B[A])}recLength+=B[0].length}function exportWAV(C){var B=[];for(var D=0;D<numChannels;D++){B.push(mergeBuffers(recBuffers[D],recLength))}if(numChannels===2){var F=interleave(B[0],B[1])}else{var F=B[0]}var A=encodeWAV(F);var E=new Blob([A],{type:C});this.postMessage(E)}function getBuffer(){var A=[];for(var B=0;B<numChannels;B++){A.push(mergeBuffers(recBuffers[B],recLength))}this.postMessage(A)}function clear(){recLength=0;recBuffers=[];initBuffers()}function initBuffers(){for(var A=0;A<numChannels;A++){recBuffers[A]=[]}}function mergeBuffers(D,B){var A=new Float32Array(B);var E=0;for(var C=0;C<D.length;C++){A.set(D[C],E);E+=D[C].length}return A}function interleave(F,B){var D=F.length+B.length;var A=new Float32Array(D);var C=0,E=0;while(C<D){A[C++]=F[E];A[C++]=B[E];E++}return A}function floatTo16BitPCM(B,E,A){for(var C=0;C<A.length;C++,E+=2){var D=Math.max(-1,Math.min(1,A[C]));B.setInt16(E,D<0?D*32768:D*32767,true)}}function writeString(A,D,B){for(var C=0;C<B.length;C++){A.setUint8(D+C,B.charCodeAt(C))}}function encodeWAV(C){var B=new ArrayBuffer(44+C.length*2);var A=new DataView(B);writeString(A,0,"RIFF");A.setUint32(4,36+C.length*2,true);writeString(A,8,"WAVE");writeString(A,12,"fmt ");A.setUint32(16,16,true);A.setUint16(20,1,true);A.setUint16(22,numChannels,true);A.setUint32(24,sampleRate,true);A.setUint32(28,sampleRate*4,true);A.setUint16(32,numChannels*2,true);A.setUint16(34,16,true);writeString(A,36,"data");A.setUint32(40,C.length*2,true);floatTo16BitPCM(A,44,C);return A};